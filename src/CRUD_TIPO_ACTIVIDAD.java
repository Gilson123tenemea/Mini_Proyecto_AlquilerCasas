
import base.ReporteCliente;
import clases.Actividades;
import clases.Agente_inmobiliario;
import clases.Tipo_Actividad;
import clases.Ubicacion;
import com.db4o.Db4o;
import com.db4o.ObjectContainer;
import com.db4o.ObjectSet;
import com.db4o.query.Query;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import static javax.swing.WindowConstants.DISPOSE_ON_CLOSE;
import javax.swing.table.DefaultTableModel;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.data.JRBeanArrayDataSource;
import net.sf.jasperreports.engine.util.JRLoader;
import net.sf.jasperreports.view.JasperViewer;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author Lenovo
 */
public class CRUD_TIPO_ACTIVIDAD extends javax.swing.JPanel {

    /**
     * Creates new form CRUD_TIPO_ACTIVIDAD
     */
    public CRUD_TIPO_ACTIVIDAD() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jTextField2 = new javax.swing.JTextField();
        lblcodigo = new javax.swing.JLabel();
        btnguardar = new javax.swing.JButton();
        btnmodificar = new javax.swing.JButton();
        btneliminar = new javax.swing.JButton();
        btnreporte = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jButton12 = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 255, 255));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel2.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel2.setText("Codigo Actividad:");
        add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 110, -1, -1));

        jLabel3.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel3.setText("Nombre Actividad:");
        add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 150, -1, -1));

        jLabel4.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel4.setText("Descripcion Actividad:");
        add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 190, -1, -1));
        add(jTextField1, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 140, 180, -1));
        add(jTextField2, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 190, 260, 80));
        add(lblcodigo, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 110, 180, 20));

        btnguardar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/crear.png"))); // NOI18N
        btnguardar.setText("GUARDAR");
        btnguardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnguardarActionPerformed(evt);
            }
        });
        add(btnguardar, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 300, 150, 30));

        btnmodificar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/mod.png"))); // NOI18N
        btnmodificar.setText("MODIFICAR");
        btnmodificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnmodificarActionPerformed(evt);
            }
        });
        add(btnmodificar, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 300, 150, 30));

        btneliminar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/eliminar_1.png"))); // NOI18N
        btneliminar.setText("ELIMINAR");
        btneliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btneliminarActionPerformed(evt);
            }
        });
        add(btneliminar, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 300, 150, 30));

        btnreporte.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/diapositiva.png"))); // NOI18N
        btnreporte.setText("REPORTE");
        btnreporte.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnreporteActionPerformed(evt);
            }
        });
        add(btnreporte, new org.netbeans.lib.awtextra.AbsoluteConstraints(660, 300, 150, 30));

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Codigo Tipo Actividad", "Nombre Actividad", "Descripcion"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(jTable2);

        add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 350, 890, 200));

        jButton12.setBackground(new java.awt.Color(255, 255, 255));
        jButton12.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/busqueda.png"))); // NOI18N
        jButton12.setBorder(null);
        jButton12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton12ActionPerformed(evt);
            }
        });
        add(jButton12, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 110, -1, -1));

        jLabel5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/LOGOS DE KAME HOUSE.PNG"))); // NOI18N
        add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(680, 0, -1, -1));

        jLabel1.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabel1.setText("TIPO DE ACTIVIDAD");
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 10, -1, -1));
    }// </editor-fold>//GEN-END:initComponents

    private void btnguardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnguardarActionPerformed
        // TODO add your handling code here:

        ObjectContainer base = Db4o.openFile(INICIO.direccion);

        crearCasa(base);
        base.close();
    }//GEN-LAST:event_btnguardarActionPerformed

    private void btnmodificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnmodificarActionPerformed
        ObjectContainer base = Db4o.openFile(INICIO.direccion);

        ActualizarDatos(base);
        base.close();
    }//GEN-LAST:event_btnmodificarActionPerformed

    private void btneliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btneliminarActionPerformed
        ObjectContainer base = Db4o.openFile(INICIO.direccion);
        String codigoEliminar = JOptionPane.showInputDialog("Ingrese el código del tipo de actividad a eliminar");
        boolean encontrado = false;

        try {
            // Verificar si el tipo de actividad está asociado a actividades
            Actividades actividadAsociada = new Actividades(null, codigoEliminar, null, null, null);
            ObjectSet resultActividad = base.get(actividadAsociada);

            if (resultActividad.size() > 0) {
                JOptionPane.showMessageDialog(this, "No se puede eliminar este tipo de actividad porque está asociado a Actividades", "ERROR", JOptionPane.ERROR_MESSAGE);
                return;
            }

            // Buscar y mostrar datos del Tipo_Actividad
            Query queryTipoActividad = base.query();
            queryTipoActividad.constrain(Tipo_Actividad.class);
            queryTipoActividad.descend("cod_tipoactividad").constrain(codigoEliminar);

            ObjectSet<Tipo_Actividad> resultTipoActividad = queryTipoActividad.execute();
            cargarTabla(base);

            if (resultTipoActividad.size() > 0) {
                encontrado = true;

                // Preguntar al usuario si desea eliminar el Tipo_Actividad
                int resul = JOptionPane.showConfirmDialog(null, "¿Deseas eliminar los datos del Tipo de Actividad?", "Confirmación", JOptionPane.YES_NO_OPTION);

                if (resul == JOptionPane.YES_OPTION) {
                    // Eliminar el Tipo_Actividad de la base de datos db4o
                    for (Tipo_Actividad tipoActividadDB : resultTipoActividad) {
                        base.delete(tipoActividadDB);
                        JOptionPane.showMessageDialog(null, "Se están borrando los datos del Tipo de Actividad");
                        cargarTabla(base);
                    }
                } else if (resul == JOptionPane.NO_OPTION) {
                    JOptionPane.showMessageDialog(null, "Datos del Tipo de Actividad no eliminados");
                }
            } else {
                JOptionPane.showMessageDialog(null, "No se encontró el código");
                cargarTabla(base);
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            base.close();
        }

    }//GEN-LAST:event_btneliminarActionPerformed

    public void ActualizarDatos(ObjectContainer base) {
        // Verificar si todos los campos están llenos
        if (jTextField1.getText().trim().isEmpty() || jTextField2.getText().trim().isEmpty()) {

            JOptionPane.showMessageDialog(null, "Por favor llene todos los campos antes de ingresar", "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }

        try {
            Tipo_Actividad micasa = new Tipo_Actividad(lblcodigo.getText().toString(), null, null);

            ObjectSet res = base.get(micasa);
            Tipo_Actividad micasita = (Tipo_Actividad) res.next();
            micasita.setNombre(jTextField1.getText().trim());
            micasita.setDescripcion(jTextField2.getText().trim());

            base.set(micasita);

            JOptionPane.showMessageDialog(this, "Modificación exitosa");
            limpiar();

        } finally {
            base.close();
        }
    }

    public void crearCasa(ObjectContainer base) {
        // Verificar si todos los campos están llenos
        if (jTextField1.getText().trim().isEmpty() || jTextField2.getText().trim().isEmpty()) {

            JOptionPane.showMessageDialog(null, "Por favor llene todos los campos antes de ingresar", "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }

        try {
            Query query = base.query();
            query.constrain(Tipo_Actividad.class);
            query.descend("cod_tipoactividad").orderDescending();
            ObjectSet<Tipo_Actividad> result = query.execute();

            int ultimoCodigo = 1;
            if (!result.isEmpty()) {
                Tipo_Actividad ultimoPersonal = result.next();
                ultimoCodigo = Integer.parseInt(ultimoPersonal.getCod_tipoactividad().substring(4)) + 1;
            }

            // Formatear el código con ceros a la izquierda
            String nuevoCodigo = String.format("TPA-%03d", ultimoCodigo);
            lblcodigo.setText(nuevoCodigo);

            // Verificar si ya existe una casa con el mismo código
            result = base.queryByExample(new Tipo_Actividad(nuevoCodigo, null, null));

            if (!result.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Ya existe un Tipo de Actividad con el código ingresado.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            // Crear objeto CasaVacacional y almacenar en la base de datos
            Tipo_Actividad casa1 = new Tipo_Actividad(nuevoCodigo, jTextField1.getText().trim(), jTextField2.getText().trim());
            base.store(casa1);

            JOptionPane.showMessageDialog(this, "Tipo de Actividad creada exitosamente");
            limpiar();
            cargarTabla(base);
        } finally {
            base.close();
        }
    }

    public void limpiar() {
        jTextField1.setText("");
        jTextField2.setText("");

        //  txtcodigoPropi.setText(" ");
    }

    public void cargarTabla(ObjectContainer base) {

        DefaultTableModel model = (DefaultTableModel) jTable2.getModel();
        model.setRowCount(0); // Limpiar la tabla antes de cargar los datos

        ObjectSet<Tipo_Actividad> result = base.queryByExample(new Tipo_Actividad());

        while (result.hasNext()) {
            Tipo_Actividad personal1 = result.next();

            Object[] row = {
                personal1.getCod_tipoactividad(),
                personal1.getNombre(),
                personal1.getDescripcion(),};
            model.addRow(row);
        }

    }

    private void buscarActividad(ObjectContainer base) {
        String codigoBusqueda = JOptionPane.showInputDialog(this, "Ingrese el código de la actividad a buscar:", "Buscar Actividad", JOptionPane.QUESTION_MESSAGE);

        if (codigoBusqueda != null && !codigoBusqueda.isEmpty()) {
            ObjectSet<Tipo_Actividad> result = base.queryByExample(new Tipo_Actividad(codigoBusqueda, null, null));

            if (!result.isEmpty()) {
                Tipo_Actividad actividadEncontrada = result.next();
                cargarDatosActividad(actividadEncontrada);
                limpiarTabla();
                cargarTabla(base, actividadEncontrada);
            } else {
                JOptionPane.showMessageDialog(this, "No se encontró ninguna actividad con el código ingresado.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
        base.close();
    }

    private void cargarTabla(ObjectContainer base, Tipo_Actividad actividadFiltrada) {
        DefaultTableModel model = (DefaultTableModel) jTable2.getModel();

        Object[] row = {
            actividadFiltrada.getCod_tipoactividad(),
            actividadFiltrada.getNombre(),
            actividadFiltrada.getDescripcion(),};
        model.addRow(row);

        base.close();
    }

    private void cargarDatosActividad(Tipo_Actividad actividad) {
        lblcodigo.setText(actividad.getCod_tipoactividad());
        jTextField1.setText(actividad.getNombre());
        jTextField2.setText(actividad.getDescripcion());

    }

    private void limpiarTabla() {
        DefaultTableModel model = (DefaultTableModel) jTable2.getModel();
        model.setRowCount(0);
    }

    public void mostrarReporte(Agente_inmobiliario agente, ObjectContainer base) {
        boolean flag = true;
        ArrayList<Tipo_Actividad> listaTipoActividad = new ArrayList<>();
        ObjectSet<Tipo_Actividad> result = base.queryByExample(Tipo_Actividad.class);
        if (result.isEmpty()) {
            JOptionPane.showMessageDialog(null, "NO podemos mostrar datos estadisticas y reportes debido a que no existen registros");
            flag = false;
        } else {

        }

        if (flag) {
            while (result.hasNext()) {
                Tipo_Actividad tipo = result.next();
                listaTipoActividad.add(tipo);
            }

            try {
                JRBeanArrayDataSource emptyDataSource = new JRBeanArrayDataSource(listaTipoActividad.toArray());
                JasperReport jr = (JasperReport) JRLoader.loadObject(getClass().getResource("/base/TipoActividad.jasper"));
                JRBeanArrayDataSource ds = new JRBeanArrayDataSource(listaTipoActividad.toArray());
                InputStream inputStreamImagen = new FileInputStream(new File("src/imagenes/logokame.PNG"));

                Map<String, Object> params = new HashMap<String, Object>();

                params.put("ds", emptyDataSource);
                params.put("rutaImagen", inputStreamImagen);
                params.put("codigoAgente", agente.getCodigo_agente());
                params.put("nombreAgente", agente.getNombre());
                params.put("apellidoAgente", agente.getApellido());
                params.put("emailAgente", agente.getEmail());

                JasperPrint jp = JasperFillManager.fillReport(jr, params, ds);
                // JasperExportManager.exportReportToPdfStream(jp, out);
                JasperViewer pv = new JasperViewer(jp, false);
                pv.setDefaultCloseOperation(DISPOSE_ON_CLOSE);

                pv.setVisible(true);

            } catch (JRException ex) {
                System.out.println("NO SE ENCONTRO LA PLANTILLA RUTA NO ENCONTRADA");
                Logger.getLogger(ReporteCliente.class.getName()).log(Level.SEVERE, null, ex);
            } catch (FileNotFoundException ex) {
                System.out.println("NO SE ENCONTRO LA PLANTILLA RUTA NO ENCONTRADA DE LA IMAGEN");
                Logger.getLogger(ReporteCliente.class.getName()).log(Level.SEVERE, null, ex);
            } catch (Exception e) {
                System.out.println("ERROR");
                e.printStackTrace();
            }
        }
    }


    private void btnreporteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnreporteActionPerformed
        ObjectContainer base = Db4o.openFile(INICIO.direccion);

        cargarTabla(base);
        mostrarReporte(Administrador_Login.agente, base);
        base.close();      // TODO add your handling code here:
    }//GEN-LAST:event_btnreporteActionPerformed

    private void jButton12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton12ActionPerformed
        ObjectContainer base = Db4o.openFile(INICIO.direccion);
        buscarActividad(base);
        base.close();
    }//GEN-LAST:event_jButton12ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btneliminar;
    private javax.swing.JButton btnguardar;
    private javax.swing.JButton btnmodificar;
    private javax.swing.JButton btnreporte;
    private javax.swing.JButton jButton12;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable jTable2;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JLabel lblcodigo;
    // End of variables declaration//GEN-END:variables
}
